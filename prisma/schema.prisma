generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("account")
}

model Athlete {
  id              Int               @id @default(autoincrement())
  espnId          Int?              @map("espn_id")
  olympediaId     Int?              @default(0) @map("olympedia_id")
  firstName       String?           @db.VarChar(255) @map("first_name")
  lastName        String?           @db.VarChar(255) @map("last_name")
  nativeName      String?           @db.VarChar(255) @map("native_name")
  sport           String            @db.VarChar(3)
  description     String?
  popScore        Int?              @map("pop_score")
  status          String?           @db.VarChar(255)
  heritage        String[]          @db.VarChar(2)
  slug            String            @unique @db.VarChar(255)
  Sport           Sport             @relation(fields: [sport], references: [id])
  FavoriteMoments FavoriteMoment[]
  @@map("athlete")
}

model FavoriteMoment {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now()) @db.Timestamp(6) @map("created_at")
  userId              Int?                  @map("user_id")
  athleteId           Int?                  @map("athlete_id")
  description         String?
  url                 String?
  Athlete             Athlete?              @relation(fields: [athleteId], references: [id])
  User                User?                 @relation(fields: [userId], references: [id])
  UserFavoriteMoments UserFavoriteMoment[]
  @@map("favorite_moment")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  @@map("session")
}

model Sport {
  id      String    @id @db.VarChar(3)
  sport   String    @db.VarChar(255)
  gender  String?   @db.VarChar(255)
  olympic Boolean?
  Athlete Athlete[]
  @@map("sport")
}

model User {
  id              Int                       @id @default(autoincrement())
  name            String?                
  email           String?                   @unique
  emailVerified   DateTime?                 @map("email_verified")
  image           String?                
  createdAt       DateTime                  @default(now()) @map("created_at")
  updatedAt       DateTime                  @default(now()) @map("updated_at")
  FavoriteMoments FavoriteMoment[]
  UserFavoriteMoments UserFavoriteMoment[]
  @@map("user")
}

model UserFavoriteMoment {
  momentId        Int
  userId          Int             @map("user_id")
  liked           Boolean         @default(true)
  FavoriteMoments FavoriteMoment @relation(fields: [momentId], references: [id])
  User            User            @relation(fields: [userId], references: [id])

  @@id([momentId, userId])
  @@map("user_favorite_moment")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  @@map("verification_request")
}